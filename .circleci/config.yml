version: 2.1

commands:

  install_ansible:
    description: install ansible
    steps:
      - run:
         name: Install ansible
         command: |
             sudo apt update
             sudo apt install software-properties-common -y
             sudo add-apt-repository --yes --update ppa:ansible/ansible
             sudo apt install ansible -y

  destroy_environment:
    steps:
      - run:
         name: Destroy environment
         when: on_fail
         command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}


  install_awscli:
   description: AWS CLI installation
   steps:
     - run:
        name: AWSCLI install
        command: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

  install_nodejs:
     description: NodeJS installation
     steps:
      - run:
          name: NodeJS install
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

    

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id: 
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string

    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
             SUCCESS = 1
             if(( $SUCCESS==1 )); 
             then
               cd ~/project/backend
               npm install
               npm run migration:revert
             fi


    # steps:
    #   - run:
    #       name: Revert migrations
    #       # Add when this will run
    #       command: |
    #         # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
    #         SUCCESS = 1
    #         if(( $SUCCESS==1 )); 
    #         then
    #         #  cd ~/project/backend
    #         #  npm install
    #         #  Add revert code here. You can find this in the Getting Started section.
    #           exit 1
    #         fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Build front-end.
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
           keys: [backend-build]
        - run:
           name: Back-end build
           command: |
             cd backend
             npm install
             npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test
        
        
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-test]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-frontend]
      - run:
          name: scan-frontend
          command: |
           cd frontend
           npm install 
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
          name: scan-backend
          command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit fix --force
           npm audit --audit-level=critical




  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum -y install tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
               - project/.circleci/ansible/inventory.txt
        - destroy_environment

  configure-infrastructure:
    docker:
    #  - image: python:3.7-alpine3.11
       - image: cimg/base:stable
    steps:
     - checkout
     - add_ssh_keys:
         fingerprints: 
            - "20:14:60:55:18:b2:75:b0:37:d4:93:8b:a5:a7:6c:ab"
     - attach_workspace:
          at: ~/ 
     - install_ansible
     - run:
         name: Configure server
         command: |
          cd .circleci/ansible
          cat inventory.txt
          ansible-playbook -i inventory.txt configure-server.yml
    #  - run:
    #       name: Install dependencies
    #       command: |
    #           apk add --update ansible
    #           apk add --update curl nodejs npm ansible zip
    #           pip install awscli

  run-migrations:
    # Docker image here that supports NodeJS
    docker: 
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migration
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt


      - run:
          name: Send migration status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              curl --insecure https://kvdb.io/Nq2uHvPfFKXMR4VXA9fdMo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy_environment
      - revert-migrations


  deploy-frontend:
     docker:
       - image: cimg/base:stable
     steps:
       - checkout
       - add_ssh_keys:
          fingerprints: 
            - "20:14:60:55:18:b2:75:b0:37:d4:93:8b:a5:a7:6c:ab"
       - attach_workspace:
           at: ~/ 
       
       - install_ansible
       - install_nodejs
       - install_awscli

       - run:
           name: Get backend url
           command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
       - run:
           name: Deploy frontend objects
           command: |
             cd frontend
             sudo npm install -g npm@latest
             rm -rf node_modules
             npm install
             npm run build
             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
       - destroy_environment
       - revert-migrations


  deploy-backend:
    docker:
       - image: cimg/base:stable
    steps:
       - checkout
       - add_ssh_keys:
          fingerprints: 
            - "20:14:60:55:18:b2:75:b0:37:d4:93:8b:a5:a7:6c:ab"
       - attach_workspace:
           at: ~/ 

       - install_ansible
       - install_nodejs
       - install_awscli

       - run:
           name: Deploy backend
           command: |
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files 
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            echo "Contents of the inventory.txt file"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

       - destroy_environment
       - revert-migrations



  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
       - checkout
       - install_nodejs
       - install_awscli

       - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
              # Fetch and prepare the BACKEND_IP env var
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

       - run:
          name: Frontend smoke test.
          command: |
             FRONTENDURL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo $FRONTENDURL
             if curl -s $FRONTENDURL | grep "Welcome"
             then
               return 0
             else
               return 1
             fi

      #  - destroy_environment
      #  - revert-migrations
      # Here's where you will add some code to rollback on failure



  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies/ Save old workflow to kvdb.io
          command: |
            export OLD_WORKFLOW_ID = ${aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text}
            echo "Old workflow: ${OLD_WORKFLOW_ID}"
            curl https://kvdb.io/Nq2uHvPfFKXMR4VXA9fdMo/old_workflow_id -d "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            # Here's where you will add some code to rollback on failure   

      - destroy_environment
      - revert-migrations 


  cleanup:
    docker:
       - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            cat ~/OldWorkflowID.txt
            Oldworkflowid = $(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${Oldworkflowid}
            echo $Oldworkflowid 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${Oldworkflowid}" ]]
            then
              echo "----------------Delete confrimed---------------"
              aws s3 rm "s3://udapeople-${Oldworkflowid}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${Oldworkflowid}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${Oldworkflowid}"
            else
             echo '..............Cannot cleanup....................'
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend: 
      #     requires: [test-frontend]
      # - scan-backend: 
      #     requires: [test-backend]

      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
     