version: 2.1

commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
          # command: |
          #   # Your code here
          #   exit 1


  destroy_environment:
    steps:
      - run:
         name: Destroy environment
         when: on_fail
         command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          name: Build front-end.
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
           keys: [backend-build]
        - run:
           name: Back-end build
           command: |
             cd backend
             npm install
             npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [frontend-test]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test
        
        
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-test]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-frontend]
      - run:
          name: scan-frontend
          command: |
           cd frontend
           npm install 
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
          name: scan-backend
          command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit fix --force
           npm audit --audit-level=critical




  # deploy-infrastructure:
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run: yum -y install tar gzip
  #       - run:
  #           name: Ensure back-end infrastructure exists
  #           command: |
  #               aws cloudformation deploy \
  #               --template-file .circleci/files/backend.yml \
  #               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #               --tags project=udapeople


  #       - run:
  #           name: Ensure front-end infrastructure exist
  #           command: |
  #               aws cloudformation deploy \
  #               --template-file .circleci/files/frontend.yml \
  #               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #               --tags project=udapeople


  #       - run:
  #           name: Add back-end ip to ansible inventory
  #           command: |
  #               aws ec2 describe-instances \
  #               --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #               --output text >> .circleci/ansible/inventory.txt
  #               cat .circleci/ansible/inventory.txt

  #       - persist_to_workspace:
  #           root: ~/
  #           paths:
  #              - project/.circleci/ansible/inventory.txt

  #       - destroy_environment

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.11
    steps:
     - checkout
     - add_ssh_keys:
         fingerprints: ["20:14:60:55:18:b2:75:b0:37:d4:93:8b:a5:a7:6c:ab"] 

     - attach_workspace:
          at: ~/ 
     
     - run:
         name: Install dependencies
         command: |
            # apk add --update ansible
            apk add --update curl nodejs npm ansible zip
            pip install awscli

     - run:
         name: Configure server
         command: |
          cd .circleci/ansible
          cat inventory.txt
          ansible-playbook -i inventory.txt configure-server.yml


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend: 
          requires: [test-frontend]
      - scan-backend: 
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [scan-frontend,scan-backend]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
     